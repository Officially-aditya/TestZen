# ============================================================
# MongoDB Configuration
# ============================================================
# MongoDB connection string - get from MongoDB Atlas or use local instance
# Example: mongodb+srv://username:password@cluster.mongodb.net/testzen?retryWrites=true&w=majority
MONGODB_URI=mongodb://localhost:27017/testzen

# ============================================================
# Hedera Network Configuration
# ============================================================
# Network to use: 'testnet' or 'mainnet'
HEDERA_NETWORK=testnet

# Hedera operator account ID - create at portal.hedera.com (testnet) or hedera.com (mainnet)
# Format: 0.0.xxxxx
HEDERA_OPERATOR_ID=0.0.xxxxx

# Hedera operator private key - obtained when creating your account
# Format: 302e020100300506032b657004220420... (DER encoded hex string)
HEDERA_OPERATOR_KEY=302e020100300506032b657004220420...

# Hedera NFT token ID - create using HTS (Hedera Token Service)
# Used for minting achievement badge NFTs
# Format: 0.0.xxxxx
HEDERA_NFT_TOKEN_ID=0.0.xxxxx

# Hedera Consensus Service topic ID - create using HCS API or Hedera CLI
# Used for publishing session completion proofs to the public ledger
# Format: 0.0.xxxxx
HEDERA_HCS_TOPIC_ID=0.0.xxxxx

# ============================================================
# IPFS Configuration (Optional - for local IPFS node)
# ============================================================
# Local IPFS node configuration (if not using Web3.storage exclusively)
IPFS_HOST=localhost
IPFS_PORT=5001
IPFS_PROTOCOL=http
IPFS_GATEWAY=https://ipfs.io/ipfs

# ============================================================
# Web3.storage Configuration
# ============================================================
# Web3.storage API token - get from https://web3.storage
# Used for uploading encrypted reflections and NFT metadata to IPFS
WEB3_STORAGE_TOKEN=your-web3-storage-api-token

# ============================================================
# Encryption Configuration (Server-side only - DO NOT expose to client)
# ============================================================
# Base encryption key for server-side operations
# Generate using: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
ENCRYPTION_BASE_KEY=your-base-encryption-key-generate-using-generateBaseKey

# Salt for key derivation (32 bytes base64)
# Generate using: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
ENCRYPTION_SALT=your-encryption-salt-32-bytes-base64

# Pepper for additional encryption security (32 bytes base64)
# Generate using: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
ENCRYPTION_PEPPER=your-encryption-pepper-32-bytes-base64

# ============================================================
# JWT/Authentication Configuration (Server-side only)
# ============================================================
# JWT secret for signing authentication tokens
# Generate using: node -e "console.log(require('crypto').randomBytes(64).toString('base64'))"
JWT_SECRET=your-jwt-secret-generate-random-64-bytes

# JWT refresh token secret (should be different from JWT_SECRET)
# Generate using: node -e "console.log(require('crypto').randomBytes(64).toString('base64'))"
JWT_REFRESH_SECRET=your-jwt-refresh-secret-generate-random-64-bytes

# ============================================================
# Client-side Encryption (Optional - defaults will be used if not set)
# ============================================================
# Client-side base key for encrypting reflections in the browser
# This is public-facing but user-specific salts provide security
NEXT_PUBLIC_ENCRYPTION_BASE_KEY=your-client-base-key

# ============================================================
# WalletConnect/HashPack Configuration
# ============================================================
# WalletConnect project ID - get from https://cloud.walletconnect.com
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your-walletconnect-project-id

# ============================================================
# Application Configuration
# ============================================================
# Next.js environment
NODE_ENV=development

# Application URL
NEXT_PUBLIC_APP_URL=http://localhost:3000

# API base URL (optional - defaults to same origin)
NEXT_PUBLIC_API_URL=http://localhost:3000/api
